// Uploads Page JavaScript - Generated by Claude Code
class UploadsManager {
    constructor() {
        this.files = [];
        this.init();
    }

    async init() {
        await this.loadFiles();
        this.setupEventListeners();
        this.updateStats();
    }

    async loadFiles() {
        try {
            const response = await fetch('/api/uploads');
            if (response.ok) {
                this.files = await response.json();
                this.renderFiles();
            } else {
                console.error('Failed to load files');
                this.showNoFiles();
            }
        } catch (error) {
            console.error('Error loading files:', error);
            this.showNoFiles();
        }
    }

    renderFiles() {
        const grid = document.getElementById('files-grid');
        const noFiles = document.getElementById('no-files');
        
        if (this.files.length === 0) {
            grid.style.display = 'none';
            noFiles.style.display = 'block';
            return;
        }
        
        grid.style.display = 'grid';
        noFiles.style.display = 'none';
        
        grid.innerHTML = this.files.map(file => this.createFileCard(file)).join('');
    }

    createFileCard(file) {
        const icon = this.getFileIcon(file.type);
        const size = this.formatFileSize(file.size);
        const date = new Date(file.uploadDate).toLocaleDateString();
        
        return `
            <div class="file-card" data-filename="${file.name}">
                <div class="file-icon">${icon}</div>
                <div class="file-info">
                    <h3>${file.name}</h3>
                    <div class="file-details">
                        <span>üìè Size: ${size}</span>
                        <span>üìÖ Uploaded: ${date}</span>
                        <span>üìÑ Type: ${file.type}</span>
                    </div>
                    <div class="file-actions">
                        <button class="btn btn-primary" onclick="uploadsManager.previewFile('${file.name}')">
                            üëÅÔ∏è Preview
                        </button>
                        <a href="/uploads/${file.name}" class="btn btn-secondary" download>
                            ‚¨áÔ∏è Download
                        </a>
                        <button class="btn btn-danger" onclick="uploadsManager.deleteFile('${file.name}')">
                            üóëÔ∏è Delete
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    getFileIcon(type) {
        const icons = {
            'image': 'üñºÔ∏è',
            'text': 'üìÑ',
            'pdf': 'üìï',
            'spreadsheet': 'üìä',
            'document': 'üìã',
            'archive': 'üì¶',
            'video': 'üé•',
            'audio': 'üéµ'
        };
        
        if (type.startsWith('image/')) return icons.image;
        if (type.includes('pdf')) return icons.pdf;
        if (type.includes('spreadsheet') || type.includes('excel')) return icons.spreadsheet;
        if (type.includes('document') || type.includes('word')) return icons.document;
        if (type.includes('zip') || type.includes('rar')) return icons.archive;
        if (type.startsWith('video/')) return icons.video;
        if (type.startsWith('audio/')) return icons.audio;
        if (type.startsWith('text/')) return icons.text;
        
        return 'üìÑ';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    async previewFile(filename) {
        try {
            const file = this.files.find(f => f.name === filename);
            if (!file) return;

            const modal = document.getElementById('preview-modal');
            const modalTitle = document.getElementById('modal-title');
            const modalBody = document.getElementById('modal-body');

            modalTitle.textContent = `Preview: ${filename}`;
            modalBody.innerHTML = '<div class="loading">Loading preview...</div>';

            modal.style.display = 'block';

            if (file.type.startsWith('image/')) {
                // Image preview
                modalBody.innerHTML = `<img src="/uploads/${filename}" class="preview-image" alt="${filename}">`;
            } else if (file.type.startsWith('text/')) {
                // Text preview
                const response = await fetch(`/uploads/${filename}`);
                const text = await response.text();
                modalBody.innerHTML = `<div class="preview-text">${text}</div>`;
            } else {
                // Generic preview
                modalBody.innerHTML = `
                    <div class="preview-generic">
                        <p>Preview not available for this file type.</p>
                        <a href="/uploads/${filename}" class="btn btn-primary" download>
                            Download File
                        </a>
                    </div>
                `;
            }
        } catch (error) {
            console.error('Error previewing file:', error);
            document.getElementById('modal-body').innerHTML = 
                '<p>Error loading preview. Please try downloading the file instead.</p>';
        }
    }

    async deleteFile(filename) {
        if (!confirm(`Are you sure you want to delete "${filename}"?`)) {
            return;
        }

        try {
            const response = await fetch(`/api/uploads/${filename}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.files = this.files.filter(f => f.name !== filename);
                this.renderFiles();
                this.updateStats();
                alert('File deleted successfully!');
            } else {
                alert('Failed to delete file');
            }
        } catch (error) {
            console.error('Error deleting file:', error);
            alert('Error deleting file');
        }
    }

    updateStats() {
        const fileCount = document.getElementById('file-count');
        const totalSize = document.getElementById('total-size');
        
        fileCount.textContent = `${this.files.length} file${this.files.length !== 1 ? 's' : ''}`;
        
        const totalBytes = this.files.reduce((sum, file) => sum + file.size, 0);
        totalSize.textContent = this.formatFileSize(totalBytes);
    }

    showNoFiles() {
        document.getElementById('files-grid').style.display = 'none';
        document.getElementById('no-files').style.display = 'block';
    }

    setupEventListeners() {
        // Modal close
        document.getElementById('modal-close').addEventListener('click', () => {
            document.getElementById('preview-modal').style.display = 'none';
        });

        // Close modal when clicking outside
        document.getElementById('preview-modal').addEventListener('click', (e) => {
            if (e.target.id === 'preview-modal') {
                e.target.style.display = 'none';
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                document.getElementById('preview-modal').style.display = 'none';
            }
        });
    }
}

// Initialize when page loads
let uploadsManager;
document.addEventListener('DOMContentLoaded', () => {
    uploadsManager = new UploadsManager();
});